/**
 * @author niharika
 */
package com.barclays.airport.routing.model;

public class Bag {
  private final String id;
  private final String entryGate;
  private final String flight;

  public Bag(String id, String entryGate, String flight) {
    this.id = id;
    this.entryGate = entryGate;
    this.flight = flight;
  }

  public String getId() {
    return id;
  }

  public String getEntryGate() {
    return entryGate;
  }

  public String getFlight() {
    return flight;
  }

  //Hashcode generation is using prime number 31:
  //https://www.baeldung.com/java-hashcode - this link mentions multiple implementations starting with the most basic to improved versions of it used by different IDEs. Below implementation 
  //is what is used and generated by Eclipse IDE.
  //How to generate HashCode and Equals implementation using Eclipse IDE: https://alvinalexander.com/blog/post/eclipse-ide/eclipse-faq-create-hashcode-equals-methods
  //https://stackoverflow.com/a/3613382 
  //some interesting conversation is mentioned in the same question's other answers.
  //Another answer displays how using a prime number provides an almost perfect distribution over some random input tested by an individual - https://stackoverflow.com/a/3613423 
  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((entryGate == null) ? 0 : entryGate.hashCode());
    result = prime * result + ((flight == null) ? 0 : flight.hashCode());
    result = prime * result + ((id == null) ? 0 : id.hashCode());
    return result;
  }

  //How to generate HashCode and Equals implementation using Eclipse IDE: https://alvinalexander.com/blog/post/eclipse-ide/eclipse-faq-create-hashcode-equals-methods
  //Reformatted for better readability
  @Override
  public boolean equals(Object obj) {
	  Bag other = (Bag) obj;
	  //Return true if this object == the param obj object.
	  if(this == obj)
		  return true;
	  //Return false if comparison using this class object and obj class object fails.
	  else if(obj == null || getClass() != obj.getClass())
		  return false;
	  //Return false if comparison using entryGate value fails between both objects: either this.entryGate is null & its entryGate is not null
	  //OR this.entryGate is not null & this.entryGate does not equal obj's entryGate. PS: other is typecasted bag object of obj. 
	  else if((entryGate == null && other.entryGate != null) 
			  || (entryGate!=null && !entryGate.equals(other.entryGate)))
		  return false;
	  //Return false if comparison using flight value fails between both objects: either this.flight is null & obj's flight is not null
	  //OR this.flight is not null & this.flight does not equal other's flight
	  else if((flight == null && other.flight!=null) 
			  || (flight!=null && !flight.equals(other.flight)))
		  return false;
	  //Return false if comparison using id value fails between both objects: either this.id is null & obj's id is not null
      //OR (this.id is not null & this.id does not equal other's id
	  else if((id==null && other.id != null)
			  || (id!=null && !id.equals(other.id)))
		  return false;
	  else
		  return true;
  }

  @Override
  public String toString() {
    return "Bag [id=" + id + ", entryGate=" + entryGate + ", flight=" + flight + "]";
  }
}
